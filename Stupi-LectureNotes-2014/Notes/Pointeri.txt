5 Pointeri; alocare dinamica

5.1 Pointeri

5.1.1 Aritmetica de pointeri

In C sunt permise o serie de operatii aritmetice cu pointeri, astfel:

Sa consideram p un pointer la un anumit tip de data T si i un intreg.

Expresiile p + i si p - i (i poate fi pozitiv sau negativ) au ca rezultat tot un pointer cu valoarea mai mare sau mai mica cu i * sizeof(T) decat p. De exemplu daca p este de tip intreg reprezentat pe 4 octeti, atunci p + 3 indica o adresa cu 12 (3 locatii a cate 4 octeti) octeti mai mare decat adresa p.

O expresie p1 - p2, unde p1 si p2 sunt pointeri de un anumit tip T are ca rezultat un intreg i care indica cate locatii cu variabile de tip T pot fi plasate intre adresele p1 si p2. 
Avem deci relatia adresa din p2 este adresa cu valoarea p1 + (p1 - p2) * sizeof(T). De exemplu, daca p1 si p2 sunt pointeri de tip double ce se reprezinta pe 8 octeti, iar p2 - p1 are valoarea 3, atunci adresa p2 este cu 24 octeti mai mare decat adresa p1.

Utilizatorul trebuie sa gestioneze pointerii fata de tipul lor, NU trebuie sa tina cont de lungimea de reprezentare a tipului.

5.1.2 Echivalenta intre tablouri si pointeri

Fie T un tip de date si sa consideram declaratiile si secventa de instructiuni:

T t[...], *p;
 . . . Initializarea tabloului t . . . 
p = t;

Elementele tabloului t:
t[0]
p[0]
*p
*t
t[1]
p[1]
*(p+1)
*(t+1)
t[2]
p[2]
*(p+2)
*(t+2)
t[3]
p[3]
*(p+3)
*(t+3)

 . . .
Adresele elementelor tabloului t:
&t[0]
&p[0]
p
t
&t[1]
&p[1]
p+1
t+1
&t[2]
&p[2]
p+2
t+2
&t[3]
&p[3]
p+3
t+3

 . . .

Aceasta echivalenta este cunoscuta sub numele de echivalenta dintre pointeri si tablouri

Puteti testa folosind de exemplu programul:

#include <stdio.h>
main () {
    long t[10], *p;
    int i;
    for (i=0; i<10; t[i++]=i);
    p = t;
    for (i=0; i<10; i++)
        printf("%d %d %d %d\n",t[i],p[i],*(p+i),*(t+i));
}

5.2 Alocare dinamica

C permite folosirea spatiului heap pentru a aloca variabile dinamice si de a le elibera. Sunt in esenta doua functii destinate acestui scop, specificate in headerul <stdlib.h>.

5.2.1 Functia malloc

Prototipul ei este:

void * malloc (size_t nOcteti);

Functia aloca nOcteti in zona heap si intoarce un pointer la inceputul acestei zone, sau NULL daca alocarea nu este posibila. Evident, utilizatorul trebuie sa converteasca pointerul intors la tipul de date dorit. De exemplu, daca avem un tip de date STUDENT si dorim sa rezervam o variabila dinamica cu 100 de locuri pentru date de acest tip, atunci se poate folosi:

#include <stdlib.h>
 . . .
STUDENT *p;
 . . .
p = (STUDENT*)malloc(100 * sizeof(STUDENT));
 . . . se pot folosi *(p+5) . . . p[5]  . . . (conform celor spuse mai sus) etc.

5.2.2 Functia free

Prototipul ei este:

void free(void *p);

Elibereaza spatiul din heap catre care puncteaza p, initializat anterior prin malloc.

5.3 Exemple de utilizare a pointerilor si variabilelor dinamice

5.3.1 Utilizarea de liste inlantuite

Vom rezolva urmatoarea problema: Se citesc de la intrarea standard un sir de linii. Dupa citirea fiecarei linii, aceasta se insereaza intr-o lista simplu inlantuita, in pozitia care sa respecte ordinea alfabetica (sortare prin insertie). Dupa terminarea citirilor lista se va tipari. Apoi se vor sterge din ea primul element, ultimul si cel din mijloc, dupa care se va tipari din nou. La sfarsit se vor elibera toate spatiile dinamice ocupate de lista.

Sursa C completa este urmatoarea:

/*
Se citesc de la intrarea standard un sir de linii.
Dupa citirea fiecarei linii, aceasta se insereaza
intr-o lista simplu inlantuita, in pozitia care sa
respecte ordinea alfabetica (sortare prin insertie).
Dupa terminarea citirilor lista se va tipari.
Apoi se vor sterge din ea primul element, ultimul
si cel din mijloc, dupa care se va tipari din nou.
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
typedef struct node {char *sir; struct node *next;} NODE;
NODE *cap;
void add(char *linie) {
    char *pc;
    NODE *nod, *pn, *qn;
    pc = (char*)malloc(strlen(linie) + 1);
    strcpy(pc, linie);
    nod = (NODE*)malloc(sizeof(NODE));
    nod->sir = pc;
    for (pn = cap, qn = NULL; pn != NULL; qn = pn, pn = pn->next) {
        if (strcmp(nod->sir, pn->sir) <= 0) break;
    }
    if (qn == NULL) cap = nod; else qn->next = nod;
    nod->next = pn;
}
void del(int n) {
    int i;
    char *pc;
    NODE *pn, *qn;
    if (cap == NULL) return;
    for (i = 0, pn = cap, qn = NULL; i < n; i++, qn = pn, pn = pn->next);
    if (pn == NULL) return;
    if (qn == NULL) cap = pn->next; else qn->next = pn->next;
    free(pn->sir);
    free(pn);
}
main () {
    char *pc, linie[100];
    NODE *pn;
    int n = 0;
    cap = NULL;
    for ( ; ; ) {
        pc = fgets(linie, 100, stdin);
        if (pc == NULL) break;
        add (linie);
        n++;
    }
    for (pn = cap; pn != NULL; pn = pn->next) printf("%s",pn->sir);
    del(n);
    del(n / 2);
    del(1);
    for (pn = cap; pn != NULL; pn = pn->next) printf("%s",pn->sir);
    for (pn = cap; pn != NULL; pn = pn->next) {
        free(pn->sir);
        free(pn);
    }
}

5.3.2 Tablouri statice transmise ca parametri

/* 
Acest program foloseste o matrice de (m,n) alocata static.
Exemplificam transmiterea matricelor (tablourilor multidimensionale) statice
ca parametri de functii. Testati astfel functionarea corecta a acestui
tip de matrice transmise ca parametri.
*/
#include <stdlib.h>
#include <stdio.h>
#define    m    4
#define    n    7
main() {
    int t[m][n], i, j;
    for (i=0; i<m; i++) 
        for (j=0; j<n; j++)
            t[i][j] = 10*j+i;
    for(i=0;i<m;i++) {
        printf("\n");
        for (j=0; j<n;j++)    
            printf("%02d ",t[i][j]);
    }
    printf("\n");
    f(t);
    printf("\n");
    g(t);
    printf("\n");
    h(t);
    printf("\n");
    l(t);
    printf("\n");
}
f(int t[m][n]) {    // Incercati si cu 20 X 3
    int i,j;
    for(i=0;i<m;i++) {
        printf("\n");
        for (j=0; j<n;j++)    
            printf("%02d ",t[i][j]);
    }
}
// Prima dimensiune statica poate sa lipseasca, celelalte trebuie puse 
g(int t[][n]) {
    int i,j;
    for(i=0; i<m; i++) {
        printf("\n");
        for(j=0; j<n; j++)
            printf("%02d ",t[i][j]);
    }
}
// Alocarea se face in m*n locatii succesive, linie dupa linie.
h(int *t) {
    int i, j;
    for(i=0; i<m; i++) {
        printf("\n");
        for(j=0; j<n; j++)
            printf("%02d ",*(t+n*i+j));
    }
}
// Daca credeti !? ca ordinea este coloana dupa coloana . . . iata: 
l(int *t) {
    int i,j;
    for(i=0;i<m;i++) {
        printf("\n");
        for(j=0;j<n;j++)
            printf("%02d ",*(t+m*j+i));
    }
}

5.3.3 Alocare dinamica a unei matrice de m X n

Sa presupunem ca dorim sa alocam un tablou bidimensional cu m linii si n coloane. Pentru aceasta, alocam mai intai un tablou de m pointeri la tipul T care vor puncta catre inceputurile de linii. Apoi, vom aloca cate m tablouri cu cate n elemente de tipul T, iar inceputurile acestor tablouri vor fi atribuite tablouui de m pointeri ce indica inceputurilor de linii. Schema de alocare aduce cu un "ciorchine de struguri": Pentru situatiile in care se impun transmiteri de tablouri ca si parametri, recomandam calduros utilizarea tablourilor dinamice in locul celor statice.

Acest mecanism permite definirea de tablouri dinamice cu mai multe dimensiuni. Pentru trei dimensiuni vom folosi ***t, pentru patru dimensiuni ****t etc.

De asemenea se pot crea tablouri care nu sunt neaparat rectangulare (de exemplu cu linii mai lungi sau mai scurte) etc. Evident, utilizatorul este obligat sa gestioneze si sa transmita dimensiunile acestor tablouri.

// Alocam dinamic un tablou bidimensional de m X n si accesam elemente ale lui
#include <stdlib.h>
#include <stdio.h>
int m, n;
main() {
    int **t, i, j;
    // . . . calculul dimensiunilor m si n . . .
    m = 10;
    n = 7;
    t = (int**)malloc(m * sizeof(int*));
    for (i=0; i<m; i++) 
        t[i] = (int*)malloc(n * sizeof(int));
    for (i=0; i<m; i++) 
        for (j=0; j<n; j++)
            t[i][j] = 10*i+j;
    for(i=0;i<m;i++) {
        printf("\n");
        for (j=0; j<n;j++)    
            printf("%2d ",t[i][j]);
    }
    printf("\n");
    f(t);
    for(i=0;i<m;i++) {
        printf("\n");
        for (j=0; j<n;j++)    
            printf("%2d ",t[i][j]);
    }
}
f (int **t) {
    t[m / 2][ n / 2] = 0;
}

5.3.4 Tablou nedreptunghiular de intregi cu retinerea dimensiunilor

// Matrice nedreptunghiulare alocate dinamic cu retinerea dimensiunilor
// Vor fi n linii, iar fiecare linie va avea un numar diferit de coloane
#include <stdlib.h>
#include <stdio.h>
main() {
    int **t, *l, i, j, n;
    n = 6+rand()%4;
    l = (int*)malloc(n * sizeof(int));
    t = (int**)malloc(n * sizeof(int*));
    for (i=0; i<n; i++) { 
        l[i] = 5+rand()%4;
        t[i] = (int*)malloc(l[i] * sizeof(int));
    }
    for (i=0; i<n; i++) 
        for (j=0; j<l[i]; j++)
            t[i][j] = 10*i+j;
    for(i=0;i<n;i++) {
        printf("\n");
        for (j=0; j<l[i];j++)    
            printf("%2d ",t[i][j]);
    }
    printf("\n");
    f(t, n, l);
    for(i=0;i<n;i++) {
        printf("\n");
        for (j=0; j<l[i];j++)    
            printf("%2d ",t[i][j]);
    }
}
f (int **t, int n, int *l) {
    t[n-1][l[n-1]-1] = 0;
}

5.3.5 Alocare dinamica a spatiului pentru tablouri bidimensionale de caractere

Vom rezolva urmatoarea problema. Se genereaza un numar aleator m mai mic decat o valoare MAX. Se genereaza apoi aleator inca m numere aleatoare, n1, n2, ... ,nm. Plecand de la aceste numere, se aloca dinamic o matrice matc, cu m linii, iar fiecare linie i va avea ni coloane. Elementele matc vor fi caractere.

Se incarca aleator toata matricea cu litere mari dupa care se tipareste. In final se elibereaza intreg spatiul dinamic ocupat.

Sursa C completa este urmatoarea:

/*
Se genereaza un numar aleator m mai mic decat o valoare MAX. Se genereaza apoi 
aleator inca m numere aleatoare, n1, n2, ... ,nm. Plecand de la aceste numere, 
se aloca dinamic o matrice matc, cu m linii, iar fiecare linie i va avea ni 
coloane 
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define MAX 100
main () {
    char **matc;
    int m, i, j, *n;
    m = rand() % MAX;
    n = (int*) malloc(m * sizeof(int));
    for (i = 0; i < m; i++) n[i] = rand() % MAX;
    matc = (char **) malloc(m * sizeof(char*));
    for (i = 0; i < m; i++) {
        matc[i] = (char*) malloc(n[i] * sizeof(char));
    }
    for (i = 0; i < m; i++)
    for (j = 0; j < n[i]; j++)
    matc[i][j] = 'A' + rand() % 26;
    for (i = 0; i < m; i++) {
        for (j = 0; j < n[i]; j++) printf("%c", matc[i][j]);
        printf("\n");
    }
    for (i = 0; i < m; i++) free(matc[i]);
    free(matc);
    free(n);
}

5.3.6 Tablouri de pointeri la stringuri

// Alocam dinamic un vector de stringuri
// Se citeste un intreg n urmat de citirea a n linii. 
// Se construie un vector dinamic de n elemente cu aceste stringuri
// Se tipareste elementul din mijloc.
// Se elibereaza toate spatiile
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
main() {
    char **t, *p, linie[1000];
    int i, n;
    fgets(linie, 1000, stdin);
    n = atoi(linie);
    t = (char**)malloc(n * sizeof(char*));
    for (i=0; i<n; i++) {
        fgets(linie, 1000, stdin);
        p = (char *)malloc(strlen(linie) + 1);
        strcpy(p, linie);
        t[i] = p;
    }
    printf("%s\n", t[n / 2]);
    for (i = 0; i < n; i++)
        free(t[i]);
    free(t); // Atentie la ordinea de eliberare!
}

Evident, metoda descrisa de mai sus poate fi extinsa cu tablouri de stringuri mai complicate, ca in exemplele de mai sus.


===================================================================================================
[Problems]
1.
Given a sequence of integers, display the sum of the groups of k
succesive elements. You must not copy the elements in another array. You
must to use a function that is given the address of the sub-array and
returns the sum.

2.
Given a sequence of integers. For each group of 5 succesive elements
(1..5, 6..10 etc) find the minimum and put it in another array (the
length 1/5 from the initial array).
Use a function that gets a pointer to a sequence of 5 elements and a
pointer to an integer where it will store the result.

3.
Given two sorted sequences of integers in descending order. Merge them
(obtaining one sorted sequence in descending order).
Use a function that gets, by pointers, the two input arrays and the
output array.

4.
Given a sequence of integers. Swap the pairs of integers on successive
positions: 1-2, 3-4, 5-6 etc.
Use a function that gets a pointer to an array of two integers and
swaps them.

5.
Write a program that computes the sum of a sequence of k vectors of
size n. For example, for k = 5 with v1, ..., v5 vectors for n components,
we obtain the (4) vectors: v1+v2, v2+v3, v3+v4, v4+v5.
Use a function that gets the number n and pointers to two vectors.
The function adds the second vector to the first.

6.
Given a set of points in an n-dimensional space (each point is given as
a vector of size n). Find the maximum distance between two points.
Use a function that gets, by pointers, two vectors and returns the
euclidean distance (sqrt(x1-x1)^2+ ... + (xn-yn)^2)) between them.

7.
Find all the prime numbers less than or equal to n, using the
Eratostene's sieve method.
To do so, use a function that gets an integer x and a pointer to an
array of n integers with the values 0 or 1 (or, better use an array
of n bits instead of integers). The function marks with 0 all
positions multiple of x.

8.
Remove the odd numbers from a sequence of integers.
Use a function that gets a pointer to an array of integers and a pointer
to an integer representing the size of the array.  The function updates
the array and its length.

9.
Given two arrays of integers with m and n elements.  Create a new array,
with m+n elements, that contains, in the first 2*min(m,n) positions, the
values alternatively one element from the first sequence and one from
the second. The rest are completed from the longest input array.
Use a function that gets, by pointers, the two source arrays and the
destination array.

10.
Given a seuqence of integers, compute the sum of each group of 6
consecutive elements (1..6, 7..12 etc), and put the sums in an new array
(with length 1/6 from the input array).  Use a function that gets a
pointer to an (sub)array of 6 elements, and a pointer to the position
where the sum should be stored.

11.
Remove the negative numbers from a sequence of integers. Use a function
that gets a pointer to an array of integers, and a pointer to an integer
representing the size of the array.  The function updates the array and
its length.

12.
You have an even length sequence of integers. For each pair of
consecutive integers, replace the pair by the pair consisting from their
product and their sum. For example, the following a array of 8 numbers
1 3  7  8  10 12  20 13
is processed into
3 4 56 15 120 22 260 33
Use a function that gets a pointer to an array of two elements. 
The function will replace them with their product and sum.

13.
Given a sequence of n * g integers. Sort each group of g succesive
numbers from sequence (the positions 0 ... g-1, positions g ... 2g-1,
and so on) in descending order.
Use a function that receives g and a pointer to a (sub)array of g integers,
and sorts the given array. Any sort algorithm can be used.

14.
Given a sequence of n * g integers. Miroring (reverse the order) in
each group of g neighbouring numbers. For example, the array of 4
numbers: 1 75 6 32 is mirrored to 32 6 75 1.
Use a function that receives g and a pointer to a (sub)array of g
integers, and mirroring elements.

15.
Given k vectors of length n. Compute the component-by-component
difference of the enclosed vectors. For example, with k = 5, we have
the vectors (with n elements) v1, v2, v3, v4, v5.  The results is the
following 4 vectors (with n elements) v1-v2, v2-v3,v3-v4, v4-v5.
Use a function that gets the number n and pointers to two vectors.
The function puts in the first vector the difference vector.