Course 3
===================================================================================================
wget url // get data in command line
[HOMEWORK ]
-3 question for what is above 
-allocate and deallocate 3 dimension matrix(2 fors)
===================================================================================================
C memory allocation
-segmentation fault ]=> trouble
-bus error			]

Question
What can you do when you get these errors? [the answers to use in the order from "[]"]
	->quickly inspect your code looking for some obvious errors .[3]
	->use "printf" to see where your program crashes. Always "\n" at the end of the "printf" string [2]
	->valgrind (compile with -g) [1]
	-> try "gdb"[debugger] [4]

[========================================]
Worst case scenario
->errors do not always happen(but it worked at home)
-> errors stop showing after adding a "printf" or when using valgrind

[========================================]
How to work with memory
[========================================]
-two types of allocation
!!!!Array indexing start at 0(zero)
	->static : int a, char s[200], float k[20][20]
	->dynamic :  malloc , calloc , realloc
				char* s, float* f [pointers]

[========================================]
Stack
[========================================]
-contains records for each function call
.-------.
|		|
|	c()	|
|  !b()	|
|	a	| <- static allocation goes into the function stack entry
|  main	|
|_______| <-Stack start
------------------------------------------
int C(){ C()} ==> stack overflow

!!!! Static allocation goes into the function Stack entry

int* d()
{
	int n=5; //is putted on the stack
	return &n; // can get some error because of Stack allocation 
}NO , bad idea
[========================================]
Heap
[========================================]
-this is where dynamic allocation goes

int* a = (int*) malloc ( 10 * sizeof(int))
free(a) // free the space from memory for a


int* ex()
{
	int* n =(int*) malloc(sizeof(int));
	*n=5;
	return n;   
}OK


HOMEWORK 
-3 question for what is above 

[========================================]
Arrays are Pointers
[========================================]

-single dimension static arrays behave just like single pointers 
-multi dimensional array work the same except things are strange when trying to pass multi-dimensional arrays to functions

void f(int a[10][20])
void f(int** a) [CHECK THIS ]

-static multi-dimensional arrays to functions

Advice - try to use dynamic multi-dimensional arrays always

int main()
{
	int a[10][20]; //In memory [10][10] ....... [10]
	int** b;

	int i;
	b = (int**) melloc(10*sizeof(int*));//here make the rows
	for(i=0;i<10;i++)
	{
		b[i]=(int*)melloc(20*sizeof(int));//here make the columns
	}

	//free the memory
	for(i=0;i<10;i++)
	{
	 	free(b[i]);//free columns || delete a[]
	}
	free(b);//free rows

	return 0;
}

[========================================]
Shell Programming
[========================================]

-a little programming language

Variable
	V = abc
To refer to variable
	A =$V

B = bob
C= cat
D = $B$C //bobcat
E = $Bcat //does nothing because we don't have Bcat variable
E = ${B}cat //bobcat

Special variables
$0 - name of the script
$1 -  $9 - arguments
	grep "gigel" /etc/passwd
	$0     $1    $2
$* -  all arguments
$? -  status of the previous program (exit)

Shell scripts

-basic text files
- extension does not matter
-first line tells what interpretor to use: 
				->sh(basic one)
				->bash(by default in unix)
				->ksh
				->csh
				->tcsh
				->zsh

First line in a bash file
#!/bin/bash [-xe]  //something like include in C/C++

Make the script executable
chmod 700 file.sh //full access write read execute

What's with the 700?
ls -l 

rwx - read write execute
d rwx - rwx - rwx 

a.sh
#!/bin/bash

echo $3 $2 $1

----
shift - shift args to the left

-----
b.sh
#!/bin/bash

echo $1 $2 $3

echo $1
shift
echo $1
shift
echo $1

a =`ls-l` 

build.sh
#!/bin/bash
e =`echo $1 | sed "s/ \.c$ / /"` // replace .c with nothing
gcc -wall -o $e $1


-----
k=0
k=`expr $k + 1`
k=$((k+1))

---
Conditions
IF
if <cond>; then  //spaces need to be there don't ignore them(Space between ; and then)
	<code>
elif <cond>; then
	<code>
else
	<code>
fi

-they are actually commands
-TRUE = exit 0
-FAlSE = exit non 0
- man/mon/men(???) test for common conditions


if gcc -wall -o a a.c; then
	echo "success"
else
	echo something
fi

===================================================================================================
[EXAMPLES]
===================================================================================================
