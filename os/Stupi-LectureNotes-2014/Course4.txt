Course 4 [20.03.2014]
===================================================================================================
[Homework]

===================================================================================================
[Other nice commands or indications]
man du [check the size of a file]
du -sb file path [return the size in bytes]
head -n 20 [get first 20 lines]

FOR Stops at space and lines

find [get what is into the directory]
===================================================================================================
Shell/Bash programming and Windows Bash programming

===================================================================================================
Conditions

In unix Shell programming, the only condition is the exit of the previous command. If the previous command has an exit code of 0 (zero meaning success), that means TRUE. Anything non-zero is false.

Shell has a nice syntax that makes conditions look like what you would expect in a programming language, but that are still commands as mentioned above.

Numerical : -eq -ne -lt -le -gt -ge
Strings : = != -z -n [-z true if is empty and  -n true if is not empty]
Files: -e -f -d -r -w -x

===================================================================================================
Shell and other program customization

Most unix programs have configuration file which they read upon startup. If you there your options, you will always have them active.

vi/vim - ~/.vimrc (mostly property settings)
emacs - ~/.emacs (lisp code)

bash - ~/.profile  ~/.bashrc ~/bash_profile (Bash script)


===================================================================================================
[Examples]

gcc -Wall -o p1 p1.c [command to compile a C file]

echo p1.c | sed "s/\.c $//"  [remove .c from name of the file]

chmod +x build.sh [where build.sh is the following bash script]
chmod 700 build.sh [read write execute for owner]

./build.sh [to execute the script]
-------------------------------------------
Bash file [Bash to compile a C program]
[-xe some debug informations]
#!/bin/bash -xe 

#echo $1 [print the first parameter,  # -for comments]

E = ` $1 | sed "s/\.c $//"` #store into a variable

#gcc -Wall  -o p1 p1.c -lm
gcc -Wall  -o $E $1 -lm


-------------------------------------------------

echo $? [status of the previous command]

-------------------------------------------------
gotcha.sh

#!/bin/bash

WORD=$1
File=$2

if grep -q $1 $2 | grep x; then 
	echo "gotcha!"
else
	echo "boo!"
fi

-------------------------------------------------
man test
-------------------------------------------------

test -x lecture.txt
echo $? 

test -r lecture.txt ; echo $?
test 1 -lt 2; echo $? [0]


-------------------------------------------------
a.sh

#!/bin/bash

A=$1
B=$2

if test $A -eq $B; then
	echo "same"
else
	echo "not the same "
fi

if [ test $A -eq $B ]; then #is the same with the first instruction
	echo "same"
elif [ $A -gt $B ]; then
	echo "greater"
elif [ $A -lt $B ]; then
	echo "less"
else
	echo "singularity"
fi

-------------------------------------------------
b.sh

#!/bin/bash

N=$1

while  [ $N -ge 0 ]; do 
	echo "$N"
	N= `expr $N - 1 `
done

-------------------------------------------------
man bash
-----------------------------
c.sh

#!/bin/bash

F=""
while true; do
	read -p "File: " F
	#echo $F
	if [ -e $F ]; then
		echo File $F exists
		breaks
	else
		echo File $F does not exists > &2
done

-----------------------------
e.sh

#!/bin/bash

while true; do
	S= `du -sb /path/ | awk '{print $1}'`
	if [ $S -gt 796000 ]; then
		echo Stop filling up the disk >&2
	fi
	sleep 2 #sleep at 2 seconds
done


-----------------------------
f.sh
#!/bin/bash 
#add into the file garbage 20 bytes
while true; do 
	echo 01234567890123456789 >>  garbage
done

-----------------------------
g.sh

#!/bin/bash
#FOR EXAMPLE

for F in a b c d e f g; do
	echo $F
done

#Get all .sh file in the directory | *.sh *.c for .sh and .c files
for F in *.sh *.c; do
	echo $F
done

#A little stats for some words in a file
for F in `cat file.txt`; do
	echo $F
done |  sort | uniq -c

-----------------------------
h.sh

#!/bin/bash

for F in `find ~ -type f`; do
	S = `ls -l $F | awk '{print $5}'`
	echo $S SF
done | sort -n -r | head -n 20

-----------------------------
i.sh

#!/bin/bash

#echo $0 $1 $2 $3 $4 $5 $6 $7 $8 $9
#shift 
#echo $0 $1 $2 $3 $4 $5 $6 $7 $8 $9

#while [ ! -z "$1" ]; do
#	echo $1
#	shift
#done

for A in $*; do
	echo $A
done

-----------------------------
j.sh
[Have a lot of file print the larger one]
#!/bin/bash

MF=""
MS=0
for A in $*; do
	if [ ! -f $A ]; then
		continue
	fi
	S = `ls -l $A | awk '{print $5}'`
	if [ $S -gt $MS ]; then
		MF = $A
		MS = $S
	fi
done