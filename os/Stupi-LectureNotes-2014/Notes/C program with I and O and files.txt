4 Operatii I/O si lucrul cu fisiere in C

4.1 Operatii I/O

Exista doua posibilitati de efectuare a operatiilor I/O din programe C: 
* Prin functiile standard C (fopen, fclose, fgets, fprintf, fread, fwrite, fseek, sprints, sscanf etc.) existente in bibliotecile standard C; prototipurile acestora se afla in fisierul header <stdio.h> (nivelul superior de prelucrare al fisierelor). Pentru orice detalii legate de aceste functii, ca si pentru alte functii inrudite cu acestea, se pot consulta manualele Unix $ man numefunctie sau $ man 3 numefunctie
* Prin functii standardizate POSIX (open, close, read, write, lseek, dup, dup2, fcntl, etc.) care reprezinta puncte de intrare in nucleul Unix si ale caror prototipuri se afla de regula in fisierul header <unistd.h>, dar uneori se pot afla si in <sys/types.h>, <sys/stat.h> sau <fcntl.h> (nivelul inferior de prelucrare al fisierelor). Pentru orice detalii legate de aceste functii, ca si pentru alte functii inrudite cu acestea, se pot consulta manualele Unix: $ man numefunctie sau $ man 2 numefunctie

Prima categorie de functii o presupunem cunoscuta deoarece face parte din standardul C (ANSI). Functiile din aceasta categorie repereaza orice fisier printr-o structura FILE *, pe care o vom numi descriptor de fisier. 

Functiile din a doua categorie constituie apeluri sistem Unix pentru lucrul cu fisiere si fac obiectul sectiunii care urmeaza. Ele (antetul lor) sunt cuprinse in standardul POSIX. Functiile din aceasta categorie repereaza orice fisier printr-un intreg nenegativ, numit handle, dar atunci cand confuzia nu este posibila il vom numi tot descriptor de fisier..

Informatii despre formatele fisierelor Pentru a obtine detalii despre formatele de fisiere si despre functii sau comenzi specifice formatelor de fisiere se poate consulta

$ man 5 nume

4.1.1 Apelul sistem open

Prototipul functiei sistem este:

int open (char *nume, int flag [, unsigned int drepturi ]);

Functia open intoarce un intreg - handle sau descriptor de fisier, folosit ca prim argument de catre celelalte functii POSIX de acces la fisier. In caz de esec open intoarce valoarea -1 si pozitioneaza corespunzator variabila errno. In cele ce urmeaza vom numi descr acest numar.

nume - specifica printr-un string C, calea si numele fisierului in conformitate cu standardul Unix.

Modul de deschidere este precizat de parametrul de deschidere flag. Principalele lui valori posibile sunt:
* O_RDONLY deschide fisierul numai pentru citire
* O_WRONLY deschide fisierul numai pentru scriere
* O_RDWR deschide fisierul atat pentru citire si pentru scriere 
* O_APPEND deschide pentru adaugarea - scrierea la sfirsitul fisierului
* O_CREAT creeaza un fisier nou daca acesta nu exista, sau nu are efect daca fisierul deja exista; urmatoarele doua constante completeaza crearea unui fisier
* O_TRUNC asociat cu O_CREAT (si exclus O_EXCL vezi mai jos) indica crearea neconditionata, indiferent daca fisierul exista sau nu
* O_EXCL asociat cu O_CREAT (si exclus O_TRUNC), in cazul in care fisierul exista deja, open esueaza si semnaleaza eroare
* O_NDELAY este valabil doar pentru fisiere de tip pipe sau FIFO si vom reveni asupra lui cand vom vorbi despre pipe si FIFO.

In cazul in care se folosesc mai multe constante, acestea se leaga prin operatorul |, ca de exemplu: O_CREAT | O_TRUNC | O_WRONLY.

Parametrul drepturi este necesar doar la crearea fisierului si indica drepturile de acces la fisier (prin cei 9 biti de protectie) si actioneaza in concordanta cu specificarea umask.

4.1.2 Apelul sistem close

Inchiderea unui fisier se face prin apelul sistem:

int close (int descr); 

Parametrul descr este cel intors de apelul open cu care s-a deschis fisierul. Functia intoarce 0 la succes sau -1 in caz de esec.

4.1.3 Apelurile sistem read si write

Acestea sunt cele mai importante functii sistem de acces la continutul fisierului. Prototipurile lor sunt:

int read (int descr, void *mem, unsigned int noct);
int write (int descr, const void *mem, unsigned int noct);

Efectul lor este acela de a citi (scrie) din (in) fisierul indicat de descr un numar de noct octeti, depunand (luand) informatiile in (din) zona de memorie aflata la adresa mem. In majoritatea cazurilor de utilizare, mem refera un sir de caractere (char* mem).

Cele doua functii intorc numarul de octeti efectiv transferati intre memorie si suportul fizic al fisierului. De regula, acest numar coincide cu noct, dar sunt situatii in care se transfera mai putin de noct octeti. 

Aceste doua operatii sunt atomice - indivizibile si neintreruptibile de catre alte procese. Deci, daca un proces a inceput un transfer intre memorie si suportul fisierului, atunci nici un alt proces nu mai are acces la fisier pana la terminarea operatiei read sau write curente. 

Operatia se considera terminata daca s-a transferat cel putin un octet, dar nu mai mult de maximul dintre noct si ceea ce permite suportul fisierului. Astfel, daca in fisier exista doar n < noct octeti ramasi necititi atunci se vor transfera in memorie doar n octeti si read va intoarce valoarea n. Daca in suportul fisierului exista cel mult n < noct octeti disponibili, atunci se depun din memorie in fisier doar n octeti si write va intoarce valoarea n. In ambele situatii, pointerul curent al fisierului avanseaza cu numarul de octeti transferati. Daca la lansarea unui read nu mai exista nici un octet necitit din fisier - s-a intalnit marcajul de sfarsit de fisier, atunci functia intoarce valoarea 0.

Daca operatia de citire sau de scriere nu se poate termina - a aparut o eroare in timpul transferului - functia intoarce valoarea -1 si se pozitioneaza corespunzator variablia errno.

4.1.4 Apelul sistem lseek

Functia sistem lseek faciliteaza accesul direct la orice octet din fisier. Evident, pentru aceasta trebuie ca suportul fisierului sa fie unul adresabil. Prototipul acestei functii sistem este:

long lseek (int descr, long noct, int deUnde);

Se modifica pointerul curent in fisierul indicat de descr cu un numar de noct octeti. Punctul de unde incepe numararea celor noct octeti este indicat de catre valoarea parametrului deUnde, astfel:
* de la inceputul fisierului, daca are valoarea SEEK_SET (valoarea 0)
* de la pozitia curenta daca are valoarea SEEK_CUR (valoarea 1)
* de la sfarsitul fisierului daca are valoarea SEEK_END (valoarea 2)

4.2 Acces la sistemul de fisiere

Unix permite efectuarea din C a principalelor operatii asupra sistemului de fisiere, oferind in acest sens cateva apeluri sistem. Ele sunt echivalente cu comenzile Shell care efectueaza aceleasi operatii. Aceste operatii sunt definite prin specificari POSIX corespunzatoare. 

De regula, aceste functii au prototipurile intr-unul dintre fisierele header:
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>

4.2.1 Manevrarea fisierelor in sistemul de fisiere

Iata prototipurile celor mai importante dintre aceste apeluri sistem:

int chdir (const char *nume);
char *getcwd(char *mem, int dimensiune);
int mkdir (const char *nume, unsigned int drepturi);
int rmdir (const char *nume);
int unlink(const char *nume);
int link(const char *numevechi, const char *numenou);
int symlink(const char *numevechi, const char *numenou);
int chmod (const char *nume, unsigned int drepturi);
int stat  (const char *nume, struct stat *stare);
int mknod(const char *nume, unsigned int mod, dev_t dev);
int chown(const char *nume, unsigned int proprietar,
      unsigned int grup);
int access(const char *nume, int permisiuni);
int rename(const char *numevechi, const char *numenou);

* chdir schimba directorul curent in cel specificat prin nume. Pe sistemele BSD si Unix System V release 4 mai este prezent si apelul fchdir care face acelasi lucru ca si chdir, doar ca directorul este specificat printr-un descriptor de fisier deschis, nu prin nume. 
* getcwd copiaza in zona de memorie indicata de mem, de lungime dimensiune octeti, calea absoluta a directorului curent. Daca calea absoluta a directorului are lungimea mai mare decat dimensiune, se returneaza NULL si errno primeste valoarea ERANGE.
* mkdir creeaza un nou director, avand calea si numele specificate prin nume si drepturile indicate prin intregul drepturi, din care se retin numai primii 9 biti.
* rmdir sterge directorul specificat prin nume (acest director trebuie sa fie gol).
* unlink sterge fisierul specificat prin nume.
* link creeaza o legatura hard cu numele numenou spre un fisier existent, numevechi. Numele nou se poate folosi in locul celui vechi in toate operatiile si nu se poate spune care dintre cele doua nume este cel initial. 
* symlink creeaza o legatura simbolica (soft) cu numele numenou spre un fisier existent, numevechi. O legatura soft este doar o referinta la un fisier existent sau inexistent. Daca sterg o legatura soft se sterge doar legatura, nu si fisierul original, pe cand daca sterg o legatura hard, se sterge fisierul original. 
* chmod atribuie drepturile de acces drepturi la fisierul specificat prin nume. Pe sistemele BSD si Unix System V release 4 mai este prezent si apelul fchmod care face acelasi lucru ca si chmod, doar ca fisierul este specificat printr-un descriptor de fisier deschis, nu prin nume.
* stat depune la adresa stare informatii privind fisierul specificat prin nume (inod-ul fisierului, drepturile de acces, id-ul proprietarului, id-ul grupului, lungimea in octeti, numarul de blocuri ale fisierului, data ultimului acces la fisier, etc.  vezi exemplul de mai jos). Sistemele BSD si Unix System V release 4 au si apelul fstat care face acelasi lucru ca si stat, doar ca fiserul este specificat printr-un descriptor de fisier deschis, nu prin nume.
* mknod creeaza un fisier simplu sau un fisier special desemnat prin nume. Parametrul mod specifica printr-o combinatie de constante simbolice legate prin simbolul | atat drepturile de acces la fisierul nou creat, cat si tipul fisierului care poate fi unul dintre urmatoarele:
- S_IFREG (fisier normal)
- S_IFCHR (fisier special de tip caracter)
- S_IFBLK (fisier special de tip bloc)
- S_IFIFO (pipe cu nume sau FIFO  vezi capitolul 5)
- S_IFSOCK (Unix domain socket  folosit pentru comunicarea locala intre procese)
Daca tipul fisierului este S_IFCHR sau S_IFBLK, atunci dev contine numarul minor si numarul major al fisierului special nou creat; altfel, acest parametru se ignora.
* chown schimba proprietarul si grupul din care face parte proprietarul unui fisier specificat prin nume. Noul proprietar al fisierului va fi cel indicat de parametrul proprietar, iar noul grup al fisierului va fi cel indicat de parametrul grup. Pe sistemele BSD si Unix System V release 4 mai este prezent si apelul fchown care face acelasi lucru ca si chown, doar ca fisierul este specificat printr-un descriptor de fisier deschis, nu prin nume.
* access verifica daca procesul curent are dreptul specificat de permisiuni relativ la fisierul specificat prin nume. permisiuni va contine una sau mai multe valori legate prin | dintre urmatoarele: R_OK - citire, W_OK - scriere, X_OK  executie si  F_OK  existenta fisier. Verificarea se face cu UID-ul si GID-ul reale ale procesului, nu cele efective (vezi capitolul 5).
* rename redenumeste fisierul specificat de numevechi in numenou.

4.2.2 Creat, truncate, readdir

Urmatoarele trei apeluri nu au corespondent direct printre comenzile Shell:
int creat(const char *pathname, unsigned int mod);
int truncate(const char *nume, long int lung);
#include <dirent.h> - - - struct dirent *readdir(DIR *dir);

Apelul sistem creat este echivalent cu urmatorul apel sistem:
open (const char *nume, O_CREAT|O_WRONLY|O_TRUNC);

Apelul sistem truncate trunchiaza fisierul specificat prin nume la exact lung octeti.

Functia readdir nu este o functie sistem, ci este functia POSIX pentru parcurgerea subdirectoarelor si fisierelor dintr-un director. Ea intoarce intr-o structura de tipul dirent urmatorul subdirector sau fisier din directorul dat de parametrul dir. Aceasta functie incapsuleaza de fapt apelul sistem getdents. Alte functii in legatura cu readdir si specificate de standardul POSIX sunt: opendir, closedir, rewinddir, scandir, seekdir si telldir. Nu intram in detalierea acestor functii deoarece ele nu sunt functii sistem.

Majoritatea apelurilor de mai sus intorc valoarea 0 in caz de succes si -1 (plus setarea corespunzatoare a variabilei errno) in caz de eroare. Exceptie de la aceasta regula fac apelurile: getcwd care returneaza NULL in caz de eroare si seteaza corespunzator errno si readdir care intoarce NULL in caz de eroare.

4.3 Exemple de programe de lucru cu fisiere

4.3.1 Un exemplu de lucru cu fisiere text: numararea propozitiilor.

La linia de comanda se da numele unui fisier text. Se cere sa se numere cate propozitii sunt in acest fisier. Solutia este una simplista: presupunand ca orice propozitie se termina fie cu punct, fie cu semn de exclamare fie cu semn de intrebare, vom numara, pur si simplu, cate astfel de caractere apar in fisier.

Solutia:

/*
Numara propozitiile dintr-un fisier text (numarand . ! ? )
*/
#include <stdio.h>
#include <string.h>
main (int argc, char* argv[]) {
    char linie[1000], *p, *q;
    int propozitii = 0;
    FILE* f = fopen(argv[1], "r");
    for (;; ) {
        p = fgets(linie, 1000, f);
        if (p == NULL) break;
        for (p = linie, q = NULL;; ) {
            q = strchr(p, '.');
            if (q == NULL) break;
            propozitii++;
            p = q + 1;
        }
        for (p = linie, q = NULL;; ) {
            q = strchr(p, '!');
            if (q == NULL) break;
            propozitii++;
            p = q + 1;
        }
        for (p = linie, q = NULL;; ) {
            q = strchr(p, '.');
            if (q == NULL) break;
            propozitii++;
            p = q + 1;
        }
    }
    fclose(f);
    printf("In \"%s\" sunt %d propozitii\n", argv[1], propozitii);
}

4.3.2 Copierea unui fisier 

Ca exemplu de folosire a apelurilor sistem open, close, read si write vom scrie un program care face acelasi lucru ca si comanda shell cp, adica copiaza continutul unui fisier intr-altul. Cele doua fisiere se vor da ca parametrii in linia de comanda. Daca al doilea fisier (fisierul destinatie) nu exista, el se va creea, iar daca exista deja, el se va suprascrie. Sursa programului este:

/*
Copiaza un fisier in altul:
copy sursa destinatie
 */
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>

main(int argc, char* argv[]) {
    int fd_sursa, fd_dest, n, i;
    char buf[100], *p;
    if (argc!=3) {
        fprintf(stderr, "Eroare: trebuie dati 2 parametrii.\n");
        exit(1);
    }
    //deschidem primul fisier in modul read-only 
    fd_sursa = open(argv[1], O_RDONLY);
    if (fd_sursa<0) {
        fprintf(stderr, "Eroare: %s nu poate fi deschis.\n", argv[1]);
        exit(1);
    }
    /* Deschidem al doilea fisier in modul write-only. Daca el nu  
     * exista, se va creea, sau daca exista va fi trunchiat. 0755  
     * specifica drepturile de acces ale fisierului nou creat  
     * (citire+scriere+executie pentru proprietar, citire+executie 
     * pentru grup si altii).
     */
    fd_dest = open(argv[2], O_WRONLY | O_CREAT | O_TRUNC, 0755);
    if (fd_dest<0) {
        fprintf(stderr, "Eroare: fisierul %s nu poate fi deschis.\n",
                argv[2]);
        exit(1);
    }
//citim din fisierul fd_sursa bucati de maxim 100 octeti si le 
//scriem in fisierul fd_dest, pana cand nu mai avem ce citi.
    for ( ; ; ) {
        n=read(fd_sursa, buf, sizeof(buf));
        if (n == 0) break; // S-a terminat de citit fisierul
        p = buf;
        for(; n > 0; ) { // Poate nu se poat scrie odata n octeti
            i = write(fd_dest, p, n);
            if (i == n) break;
            p += i;
            n -= i;
        }
    }
    //inchidem cele doua fisiere
    close(fd_sursa);
    close(fd_dest);
}

4.3.3 Exemplu de lucru cu fisiere binare: oglindirea unui fisier.

La linia de comanda se da un nume de fisier. Se cere sa se realizeze oglindirea acestui fisier - primul octet al fisierului se schimba cu ultimul, al doilea cu penultimul s.a.m.d pana se ajunge la jumatatea fisierului.

Prezentam doua variante de rezolvare si invitam studentii sa le testeze pe ambele si sa observe diferentele intre codurile C si intre vitezele de executie.

Este de asemenea util sa se retina din solutia a doua functiile Read si Write, care s-ar putea dovedi utile si in alte situatii. 

Solutia1:

/*
 Oglindeste continutul unui fisier binar dat la linia de comanda.
 Oglindirea se realizeaza citind caracter cu caracter.
 A se confrunta cu executia programului similar oglindan.c
 */
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <time.h>
main(int argc, char *argv[]) {
    int f;
    long ps, pd, m;
    char os, od;
    struct stat stare;
    time_t start;
    start = time(NULL);
    stat(argv[1], &stare);
    f = open(argv[1], O_RDWR);
    m = stare.st_size / 2;
    for (ps=0, pd=stare.st_size-1; ps+1 <= m; ps++, pd--) {
        lseek(f, ps, SEEK_SET);
        read(f, &os, 1);
        lseek(f, pd, SEEK_SET);
        read(f, &od, 1);
        lseek(f, ps, SEEK_SET);
        write(f, &od, 1);
        lseek(f, pd, SEEK_SET);
        write(f, &os, 1);
    }
    close(f);
    printf("Durata: %d\n",(int)(time(NULL)-start));
}

Solutia2:

/*
 Oglindeste continutul unui fisier binar dat la linia de comanda.
 Oglindirea se realizeaza citind blocuri de octeti consecutivi.
 A se confrunta cu executia programului similar oglinda1.c
 */
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <time.h>
#define MAX 10000
void oglinda(char sir[MAX], int n) {
    int ps, pd;
    char t;
    for (ps = 0, pd = n - 1; ps < pd; ps++, pd--) {
        t = sir[ps];
        sir[ps] = sir[pd];
        sir[pd] = t;
    }
}
void Read(int f, char *t, int n) {
    char *p;
    int i, c;
    for (p = t, c = n;;) {
        i = read(f, p, c);
        if (i == c)
            return;
        c -= i;
        p += i;
    }
}
void Write(int f, char *t, int n) {
    char *p;
    int i, c;
    for (p = t, c = n; c;) {
        i = write(f, p, c);
        if (i == c)
            return;
        c -= i;
        p += i;
    }
}
main(int argc, char *argv[]) {
    int f, m, n;
    long ps, pd;
    char os[MAX], od[MAX];
    struct stat stare;
    time_t start;
    start = time(NULL);
    stat(argv[1], &stare);
    n = MAX;
    m = stare.st_size / 2;
    if (n > m) n = m;
    f = open(argv[1], O_RDWR);
    for (ps=0, pd=stare.st_size-n; ps+n <= m; ps+=n, pd-=n) {
        if (m - ps < n) n = m - ps;
        lseek(f, ps, SEEK_SET);
        Read(f, os, n);
        lseek(f, pd, SEEK_SET);
        Read(f, od, n);
        oglinda(os, n);
        oglinda(od, n);
        lseek(f, ps, SEEK_SET);
        Write(f, od, n);
        lseek(f, pd, SEEK_SET);
        Write(f, os, n);
    }
    close(f);
    printf("Durata: %d\n",(int)(time(NULL)-start));
}

4.3.4 Obtinerea tipului de fisier prin apelul sistem stat

In aceasta sectiune vom da un exemplu de utilizare a lui stat. Exemplul se refera la afisarea tipului de fisier pentru fisierele ale caror nume sunt date ca argumente la linia de comanda.

Programul tipfis.c exemplifica folosirea apelului sistem stat pentru determinarea tipului de fisier recunoscut de catre sistem. Tipurile de fisiere le-am prezentat intr-o sectiune precedenta.

/* 
 * Tipareste tipurile fisierelor date in linia de comanda 
 */
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
main (int argc, char *argv[]) {
    int i;
    struct stat statbuff;
    char tip[40];
    strcpy(tip, "");
    for (i = 1; i < argc; i++) {
        printf ("%s: ", argv[i]);
        if (stat (argv[i], &statbuff) < 0)
        fprintf (stderr, "Eroare stat");
        switch (statbuff.st_mode & S_IFMT) {
            case S_IFDIR:
            strcpy(tip, "Director");
            break;
            case S_IFCHR:
            strcpy(tip, "Special de tip caracter");
            break;
            case S_IFBLK:
            strcpy(tip, "Special de tip bloc");
            break;
            case S_IFREG:
            strcpy(tip, "Obisnuit");
            break;
            case S_IFLNK:
            /* acest test nu va fi adevarat niciodata deoarece stat    
             * verifica in cazul unei legaturi simbolice, fisierul
             * pe care il refera legatura si nu legatura in sine. Il
             * scriem aici pentru completitudine. Ca sa verificam
             * tipul unei legaturi simbolice putem folosi functia
             * lstat asemanatoare cu stat si disponibila pe 
             * versiunile BSD si Unix System V.
             */
            strcpy(tip, "Legatura simbolica");
            break;
            case S_IFSOCK:
            strcpy(tip, "Socket");
            break;
            case S_IFIFO:
            strcpy(tip, "FIFO");
            break;
            default:
            strcpy(tip, "Tip necunoscut");
        } //switch
        printf ("%s\n", tip);
    } //for
} //main



===================================================================================================
[Problems]

1.
Display on the standard output the content of a text file adding
an empty line after each line from the file.
The name of the file is given as a command line parameter.

2.
Write a program that deletes the bytes at even addresses from a file.
No load all file at once into memory, nor use an additional file.
The name of the file is specify at the command line.
See the chsize() function.

3.
At the command line a name of text file is giving. Count the words of
each line from the file. Print the line with maximum number of words.

4.
Compare the content of two files given as command line parameters. The
comparison will be made over 1KB blocks. The program will display the
number of such blocks in each file and the number of identical blocks
found.

5.
Write a program that takes two words and a file name as command line
parameters. The program will display at standard output the content of
the file replacing the occurences of the first word with the second.

6.
Write a program the takes as command line parameters a word and a file
name. The program will read the file line by line, will erase from the
each line the word, and then print the line to standard output.

7.
At the command line, three names of text files, tow inputs, one output,
are giving. Supose that the lines in the input files are in alphabetical
order. The output file is obtain by merging the input files, no double
line appears, and each line ends with the number of the appearances
the line in input files.

8.
At the command lin a name of a file is giving. Make the rotate the
bytes from the file to the left with 3 position: 3->0, 4->1, 5->2,
6->3, ..., n->n-3, 1->n-2, 2->n. No use any additional file.

9.
At the command lin a name of a file is giving. Make the rotate the
bytes from the file to the right with 4 position: 0->4, 1->5, 2->6, 
3->7, ..., n-4->n, n-3->3, n-2->2, n-1->1, n->0. No use any additional file.

10.
Let be a text file, redirected as standard input, each line from it
hava only an integer. Write a program filter that put to standard
output the same lines, but with numbers in hexadecimal representation.
Must use scanf and printf.

11.
Let be a text file, redirected as standard input. Write a program
filter that put to standard output the lines from the standard input,
but the order of the words from lines are reverse.

12.
Let be a text file, redirected as standard input. Write a program
filter that put to standard output the lines from the standard input,
replacing A E I O U a e i o u with respectively with
a e i o u A E I O U.

13.
At the command line three file are gived, two for input, one for output.
The output file is obtain from input files, as follow: 10 bytes from
the first file, 20 bytes from the second file, next 10  bytes from the
first file, next 20 bytes from the second file and so on, until
an imput file is finished.
Simple but inefficient solution: read and write groups of 10 / 20 bytes.
An efficient (but not simple) solution: read and write blocks
with 5000 bytes.

14.
At the command line three file are gived, two for input, one for output.
The output file is obtain from input files, as follow: first byte from
the first file, last byte from the second file, second byte from the
first file, before last byte from the second file and so on, until an
imput file is finished.
Simple but inefficient solution: read and write byte after byte.
An efficient (but not simple) solution: read and write blocks
with 5000 bytes.

15.
Let be a text file, redirected as standard input. Write a program
filter that put to standard output the lines from the standard input,
replacing each from the characters % / \ ' " $ + by three symbols
%hh, where hh is the Ascii code, in hexadecimal, of the replaced symbol.