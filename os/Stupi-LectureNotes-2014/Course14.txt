Course 14
===================================================================================================
[Homework]

===================================================================================================
[Observations]

in python you have only pointers
===================================================================================================
Memory Management

->allocating memory for a process
	-when a process start where does it go in memory?
	-when a memory allocation call comes (malloc). where do you place it?
	-when you load a process how much of it do you load and when?
	-when system memory fills up, what do you do? (like a system designer)
	-how do caches work?

1. Memory allocation 

->Real - single tasking OS (*)
	   - multitasking OS
	   		-fixed partitions
	   			- absolute (*)
	   			- relocatable (*)
	   		-variable (dynamic) partitions (*)
->Virtual - paged (*)
		  - segmented (assembly idea) (*)
		  - paged + segmented (*)

*Single tasking
	-> all memory available for the process except for a OS specific resident area
*Absolute fixed partitions
	-> split memory into pre define partitions, each process gets one
	-> adv : simple to implement
	-> disadv : limit number of concurrent process
	-> the size of partition limits the process size
	-> you would compile (link) a program for a specific partition.

(Memory address translation)
Check notebook for figure
c source files
a.c -----> a.o -----\
b.c -----> b.o ------>binary (.exe) =====> process
c.c -----> c.o -----/
  compile	/\	link				execute
  			||
  			libs	

 Check notebook for figure.


 *Relocatable Fixed Partitions
 	-> very similar to the absolute partitions
 	-> linker does not pre-compute addresses , this is done at runtime 
 	-> they can vary in size(not all partitions have the same size)

 *Variable partitions
 	->simplistic idea: every process is given a place in memory wherever it fits
 	check notebook for figure

*Virtual page allocation
check notebook for figure

	-> program and memory are split into pages, each virtual page of the program goes to a real page in memory 
			=> we need to know were all pages of a process are
	-> any address in our program will be a pair (page, offset)
check notebook for figure

*Segmented
	-> somewhat similar in concept to variable partitions, but - the program can be split into segments by content (data, code) [this is good because you can reuse pure segments(code, constants)]; allows for access protection (segmentation fault)
	-> smaller than variable partitions, can still lead to fragmentation

*Segmented + Paged
	-> each segment is paged [each segment is slip into pages]

-----------------------------------------------------------
Memory placement policies

What do you do for a malloc?
check notebook for figure.

Possible cases for malloc (Check book for this )
First Fit
Best Fit(slower)
Worst Fit
Buddy Fit  2^n = 1 + 1 + 2^2 + .... +  2^(n-1) [A formula]


-----------------------------------------------------------

Loading policies

(pages)
-> all from the start:  slow, waste memory
-> one by one as needed : slow
->mind-way : principle of locality, load also a few neighbors

-----------------------------------------------------------

Replacement policies

(not at exam)
-> Not recently used
-> FIFO
-> Least recently used