Compiling C on Unix (In Windows, can use for example MinGW for similar gcc) 
===================

The general form of the compilation command is:

gcc -o name | -c -g -l Csourse and eventually object modules from other compilation

In the simple form we can compile:

gcc file.c

Result the a.out executable file that can be launched:

./a.out arguments

The main gcc main options are:

-o name for compile and link, and an executable file named name is create

-c compiles name.c source but not link. The result is the file object nume.o

-lLibraryName find LibraryName in the standard Unix libraries and use it to
 link.

-g extracod for debugging the program is generated.


Simple C examples: argvenvp.c, pi.c, plus10.c, bubbleInt.c, bubbleString.c, binaryInt.c, binaryString.c
==================

1. Display command line arguments and environment variables.
============================================================

The source argvenvp.c is:

// Afiseaza numarul de argumente din linia de comanda,
// argumentele liniei de comanda si variabilele de mediu 
#include <stdio.h>
main (int argc, char *argv[], char *envp[]) {
    int i;
    printf ("%d\n", argc);
    for (i = 0; argv[i] /* echivalent: i < argc */ ; i++)
        printf ("%s\n", argv[i]);
    printf ("\n");
    for (i = 0; envp[i]; i++)
        printf ("%s\n", envp[i]);
}

The run:

gcc argvenvp.c

a.exe unu 2 Trei patru 5
6
a
unu
2
Trei
patru
5

ACTIVEMQ_HOME=c:\apache-activemq-5.9.0
ALLUSERSPROFILE=C:\ProgramData
ANT_HOME=c:\apache-ant-1.8.3
APPDATA=C:\Users\Florin\AppData\Roaming
COMMANDER_DRIVE=C:
COMMANDER_EXE=C:\totalcmd\TOTALCMD64.EXE
COMMANDER_INI=C:\Users\Florin\AppData\Roaming\GHISLER\wincmd.ini
COMMANDER_PATH=C:\totalcmd
CommonProgramFiles=C:\Program Files (x86)\Common Files
CommonProgramFiles(x86)=C:\Program Files (x86)\Common Files
CommonProgramW6432=C:\Program Files\Common Files
COMPUTERNAME=RLF
ComSpec=C:\Windows\system32\cmd.exe
FP_NO_HOST_CHECK=NO
HOMEDRIVE=C:
HOMEPATH=\Users\Florin
JAVA_HOME=c:\jdk1.7.0_51
JBOSS_HOME=c:\jboss-as-7.1.1.Final
JETTY_HOME=jetty-distribution-8.1.7.v20120910
LOCALAPPDATA=C:\Users\Florin\AppData\Local
LOGONSERVER=\\RLF
MYSQL_HOME=c:\xampp\mysql
NUMBER_OF_PROCESSORS=8
OS=Windows_NT
Path=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\;c:\jdk1.7.
0_51\bin;c:\jdk1.7.0_51\jre\bin;c:\apache-ant-1.8.3\bin;c:\Python27;c:\jboss-as-7.1.1.Final\bin;c:\xampp\mysql\bin;C:\Program Files (x86)\OpenVPN\bin;c:\MinGW\bin;c:\Python27\Scripts;c:\MyBin
PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
PROCESSOR_ARCHITECTURE=x86
PROCESSOR_ARCHITEW6432=AMD64
PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 42 Stepping 7, GenuineIntel
PROCESSOR_LEVEL=6
PROCESSOR_REVISION=2a07
ProgramData=C:\ProgramData
ProgramFiles=C:\Program Files (x86)
ProgramFiles(x86)=C:\Program Files (x86)
ProgramW6432=C:\Program Files
PROMPT=$P$G
PSModulePath=C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
PUBLIC=C:\Users\Public
PYTHON_HOME=c:\Python27
SESSIONNAME=Console
SystemDrive=C:
SystemRoot=C:\Windows
TEMP=C:\Users\Florin\AppData\Local\Temp
TMP=C:\Users\Florin\AppData\Local\Temp
USERDOMAIN=RLF
USERNAME=Florin
USERPROFILE=C:\Users\Florin
VBOX_INSTALL_PATH=C:\Program Files\Oracle\VirtualBox\
windir=C:\Windows


2. Compute PI
=============

The source pi.c is:

#include <stdio.h>
#include <math.h>
// Calculeaza aproximativ PI in trei variante:
// 1. Folosind functia standard atan
// 2. Folosind seria armonica patrata SUM(1/n^2) -> PI^2/6
// 3. Primele 800 cifre ( vezi http://crypto.stanford.edu/pbc/notes/pi/code.html).
main() {
    printf("PI (cu atan) = %12.10f\n", 4 * atan(1.0));
    int n;
    double pi;
    for (n=2, pi= 1.0; ; n++) {
        double t = (double)1.0/(double) n /(double) n;
        if (t < 0.000000000001) break;
        pi += t;
    }
    pi = sqrt(6 * pi);
    printf("PI (cu %d termeni ai seriei) = %12.10f\n", n, pi);
    printf("PI (cu 800 cifre) = ");
    int r[2800 + 1];
    int i, k;
    int b, d;
    int c = 0;
    for (i = 0;i < 2800; i++) {
        r[i] = 2000;
    }
    for (k = 2800; k > 0; k -= 14) {
        d = 0;
        i = k;
        for (;;) {
            d += r[i] * 10000;
            b = 2 * i - 1;
            r[i] = d % b;
            d /= b;
            i--;
            if (i == 0) break;
            d *= i;
        }
        printf("%.4d", c + d / 10000);
        c = d % 10000;
    }
    printf("\n");
}

The run:

gcc pi.c

./a.out  (or a.exe for windows)
PI (cu atan) = 3.1415926536
PI (cu 1000001 termeni ai seriei) = 3.1415916987
PI (cu 800 cifre) = 314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555
96446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665
21384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752
38467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995
10597317328160963185


3. Add two big numbers, digit by digit, represented as strings.
===============================================================

The source plus10.c is:

# include <stdio.h>
# include <string.h>
# include <ctype.h>
// Adunarea, cifra cu cifra in baza 10, a doua numere pozitive cu maximum 100
// cifre fiecare, date ca siruri de cifre ASCII
main () {
    char a[101], b[101], c[101];
    int m, n, k, i, t;
    fgets(a, 101, stdin);
    fgets(b, 101, stdin);
    for ( i=0; i<strlen(a); i++)
        if (!isdigit(a[i])) {
            a[i] = 0; // se retin doar primele cifre
            break;
        }
    for ( i=0; i<strlen(b); i++)
        if (!isdigit(b[i])) {
            b[i] = 0; // se retin doar primele cifre
            break;
        }
    m = strlen(a);
    n = strlen(b);
    k = (n < m? m : n) + 1;
    c[k] = 0; // restul locurilor vor fi completate dupa adunare
    // Se aliniaza sirurile a si b deplasandu-le spre deapta
    for (i = k; i >= k - m; a[i] = a[i - k + m], i--);
    for (i = k; i >= k - n; b[i] = b[i - k + n], i--);
    // Se completeaza cu zerouri la stanga
    for (i = 0; i < k - m; a[i] = '0', i++);
    for (i = 0; i < k - n; b[i] = '0', i++);
    for (i = k - 1, t = 0; i >= 0; i--) {
        t = a[i] - '0' + b[i] - '0' + t;
        c[i] = t % 10 + '0';
        t = t / 10;
    }
    // Se elimina zerourile nesemnificative
    for (i = 0; a[i] == '0' && i < m ; a[i++] = ' ');
    for (i = 0; b[i] == '0' && i < n ; b[i++] = ' ');
    for (i = 0; c[i] == '0' && i < k ; c[i++] = ' ');
    printf("%s +\n%s =\n%s\n", a, b, c);
}

The run:

gcc plus10.c

./a.out
01234567890123456789
9999999999999999999999
    1234567890123456789 +
 9999999999999999999999 =
10001234567890123456788


4. Read a vector of integers ang sorting it using bubble sort
=============================================================

The source bubbleInt.c is:

# include <stdio.h>
// Citeste de la intrarea standard maximum 100 numere intregi,
// cate unul pe linie. Citirea se termina la tastarea
// EOF (^d sau ^z) sau la limita de 100 numere.
// Se sorteaza sirul prin metoda bulelor
// si se tipareste.
main () {
    int sir[100],i, j, x, n, u, dr;
    for ( n=0; ; ) {
        if (fscanf(stdin, "%d", &x) == EOF) break;
        if (n >= 100) break;
        sir[n++] = x;
    }
    printf("Sirul initial: ");
    for (i=0; i<n; fprintf(stdout, "%d ", sir[i]), i++);
    dr = n - 1;
    for ( ; ; ) {
        for (i=0, u=-1; i<dr; i++) {
            if (sir[i] > sir[i+1]) {
                x = sir[i];
                sir[i] = sir[i+1];
                sir[i+1] = x;
                u = i;
            }
        }
        if ( u <= 0) break;
        dr = u;
    }
    printf("\nSirul ordonat: ");
    for (i=0; i<n; fprintf(stdout, "%d ", sir[i]), i++);
}

The run:

gcc bubbleInt.c

./a.out
8
6
-1
0
6
6
^d
Sirul initial: 8 6 -1 0 6 6
Sirul ordonat: -1 0 6 6 6 8



5. Read a vector of lines and sorting it using bubble sort
==========================================================

The source bubbleString.c is:

# include <stdio.h>
# include <string.h>
// Citeste de la intrarea standard un sir de maximum 100 linii,
// cu maximum 50 caractere fiecare (cele mai lungi se scurteaza).
// Citirea se termina la tastareaEOF (^d sau ^z) sau la limita de 100 linii.
// Se sorteaza alfabetic sirul prin metoda bulelor
// si se tipareste.
main () {
    char sir[100][50],i, j, x[50], n, u, dr;
    for ( n=0; ; ) {
        if (fgets(x, 50, stdin) == NULL) break;
        if (n >= 100) break;
        x[strlen(x) - 1] = 0; // Se sterge \n de la sfarsit (fgets il lasa)
        strcpy(sir[n++], x);
    }
    printf("Sirul initial:\n");
    for (i=0; i<n; fprintf(stdout, "%s\n", sir[i]), i++);
    dr = n - 1;
    for ( ; ; ) {
        for (i=0, u=-1; i<dr; i++) {
            if (strcmp(sir[i], sir[i+1]) > 0) {
                strcpy(x, sir[i]);
                strcpy(sir[i], sir[i+1]);
                strcpy(sir[i+1], x);
                u = i;
            }
        }
        if ( u <= 0) break;
        dr = u;
    }
    printf("\nSirul ordonat:\n");
    for (i=0; i<n; fprintf(stdout, "%s\n", sir[i]), i++);
}


gcc bubbleString.c

./a.out
masina
valiza
nu stiu ce
avion
5
^d
Sirul initial:
masina
valiza
nu stiu ce
avion
5

Sirul ordonat:
5
avion
masina
nu stiu ce
valiza



6. Binary search into an ordered vector of integers
===================================================

The source binaryInt.c is:

# include <stdio.h>
// Cauta binar intr-un sir ordonat o valoare v data la linia de comanda  
main (int argc, char *argv[]) {
    int sir[] = {1,2,4,5,7,8,9};
    int m, s, d, v, n;
    v = atoi(argv[1]);
    int g = 0;
    n = sizeof(sir) / sizeof(int);
    printf("Se cauta %d in sirul urmator:\n", v);
    for (s=0; s<n; printf("sir[%d]=%d ",s, sir[s]), s++);
    printf("\n");
    for ( s = 0, d = n-1; s <= d ; ) {
        m = (s + d) / 2;
        if (sir[m] == v) {g=1;break;}
        if (sir[m] <= v) s = m + 1; else d = m - 1;
    }
    if (g == 0) 
        printf("NU! %d ar trebui sa fie aproape de pozitia %d\n", v, m);
    else
        printf("Da, %d este pe pozitia %d in sir\n", v, m);
}


The run:

gcc binaryInt.c

./a.out 6
Se cauta 6 in sirul urmator:
sir[0]=1 sir[1]=2 sir[2]=4 sir[3]=5 sir[4]=7 sir[5]=8 sir[6]=9
NU! 6 ar trebui sa fie aproape de pozitia 4

./a.out 7
Se cauta 7 in sirul urmator:
sir[0]=1 sir[1]=2 sir[2]=4 sir[3]=5 sir[4]=7 sir[5]=8 sir[6]=9
Da, 7 este pe pozitia 4 in sir


7. Binary search into an ordered vector of strings
==================================================

Sursa binaryString.c este:

# include <stdio.h>
#include <string.h>
// Cauta binar intr-un sir ordonat o valoare v data la linia de comanda  
main (int argc, char *argv[]) {
    char* sir[] = {"avion", "caruta", "masina", "tramvai", "vapor"};
    int m, s, d, n, c;
    char v[100];
    strcpy(v, argv[1]);
    int g = 0;
    n = sizeof(sir) / sizeof(char*);
    printf("Se cauta %s in sirul urmator:\n", v);
    for (s=0; s<n; printf("sir[%d]=%s ",s, sir[s]), s++);
    printf("\n");
    for ( s = 0, d = n-1; s <= d ; ) {
        m = (s + d) / 2;
        c = strcmp(sir[m], v);
        if (c == 0) {g=1;break;}
        if (c < 0) s = m + 1; else d = m - 1;
    }
    if (g == 0) 
        printf("NU! %s ar trebui sa fie aproape de pozitia %d\n", v, m);
    else
        printf("Da, %s este pe pozitia %d in sir\n", v, m);
}

Rularea:

gcc binaryString.c

./a.out ceva
Se cauta ceva in sirul urmator:
sir[0]=avion sir[1]=caruta sir[2]=masina sir[3]=tramvai sir[4]=vapor
NU! ceva ar trebui sa fie aproape de pozitia 1

./a.out caruta
Se cauta caruta in sirul urmator:
sir[0]=avion sir[1]=caruta sir[2]=masina sir[3]=tramvai sir[4]=vapor
Da, caruta este pe pozitia 1 in sir



===================================================================================================
[Problems]

1.
Generate natural prime numbers less than a given numer n. The n is
reading from the standard input.

2.
Generate the first n (n being given) prime numbers.

3.
Generate all possible representations of a natural number n (n being
given) as the sum of consecutive numbers.

4.
Let given, from the standard input, the positive integers k, n and m.
Generate first n digits for the subunit fraction k/m = 0.c1c2c3...cn,
where k and m are natural numbers, and c1, c2, ... cn are the digits
to be determined.

5.
Read from the standard input an integer n. Determine first n pairs of
prime numbers, so that their differecne is 2.

6.
Determine all natural numbers smaller than n which are relatively prime
with respect to n.

7.
Read from the standard input two dates from the same year, each of date
having three numbers: year, month, day.
Determine how many days are between the two dates.

8.
Read an integer from the standard input. The number represents the
number of days after 01.01.2011. Print the corresponding date.

9.Determine the intersection of two segments friom plan given by chartesian
coordinates (reading from the standard input).

10.
Read from the standard input an integer n and a float x. Determine the
value x^n, using some multiplication operations.

11.
Read an integer n from the standard input. Decompose n in prime factors.

12.
Read an integer n from the standard input. Find two prime numbers, so
that the teir sum to be n.

13.
Read from standard input a set of natural not null numbers. Read is
finish when a 0 is reading. Determine the number of ending zeros in the 
product of the given numbers.

14.
Read from standard input an integer with two digits. Starting with this
number, generate 1000 numbers using the following rule: Compute the
square of the number, then the number formed with the two middle digits
of the square is the new generated number etc. If the square number has
an three digits, consider the first two as the "middle two digits".
Count how many of the generated numbers are in the intervals [0,24],
[25,49], [50,74], [75,99].
