Course 7
===================================================================================================
[Homework]

===================================================================================================
[Observations]
man popen
man execl
man fgets
man pipe
===================================================================================================

fork()  - duplicates current process, creating a child process identical to it, however, in the parent it returns the PID of the child, while in the child it returns 0 (since the child knows its own PID)

wait()  - waits until any child process ends, and returns its exit status, unless you pass a zero or NULL to it.

This is good-ish ... but how do I run another program from my program?

exec* system calls
===================================================================================================

There are six exec* calls, all do the same thing, but they differ in the way they get the parameters.
See man execl(exec1). Some take the program path absolute, some take it relative, some take the arguments as an array, some take it as a printf-like list of parameters, and finally, some can take a list of environment variables.

All the exec* calls replace the current process code with that of the program passed to it.

To run and get the output of another process, use "popen".

-------------------------------------------------
Adding Numbers in parallel
-------------------------------------------------
Sequential solution

int a[1000] ={1,2,3,....,1000};

for(i=0;i<1000;i++)
{
	sum+=a[i];
}


Parallel solution

1 2  3  4  5  6  7  8  9  10  11  12  13  14  15  16 
|/   |/    |/	 |/    |/	  |/	  |/      |/
3    7    11    15    19      23      27      31  (8 simultaneous [] process adding the right number to the left)

10 			26		  42			  58 (4 simultaneous processes)

36					100   (2 simultaneous processes)

136

-------------------------------------------------

Unix Pipes
-------------------------------------------------

Pipes are structures in the kernel, create by an ancestor process (not necessarily the parent) and inherited by all the children. They allow each process to send stuff to the other, as if writing through on end and reading from the other. 

A pipe is pair of file descriptions. The first one (index 0) is for reading from the pipe, and the second (index 1) is for writing.


Unix FIFO
-------------------------------------------------

Works like a pipe, but it is really a file. Can be create with:

-command line: mkfifo, mknod
-C functions: mkfifo, mknod

===================================================================================================
Examples

ex1.c

#include<stdio.h>
#include<unistd.h>

int main()
{
	
	printf("==============================BEFORE\n");
	execlp("/bin/ls", "/bin/ls", "-l" , "-F", "--color=never", "..", NULL); //First parameter is the name of the program
	printf("==============================AFTER\n");
	return 0;

}


ex2.c
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>

int main()
{
	int r;
	printf("==============================PARENT BEFORE FORK n");
	r = fork();
	printf("=============================PARENT AFTER FORK\n");
	if(r == 0) // we are in the child
	{
			printf("==============================CHILD BEFORE EXEC\n");

			r =execlp("/bin/ls", "/bin/ls", "-l" , "-F", "--color=never", "..", NULL); //First parameter is the name of the program

			if ( r == -1)
			{
				perror("Filed to exec.");
			}
			printf("==============================CHILD AFTER EXEC \n");
			exit(0); //  we need this if the execlp doesn't find the program 
	}
	wait(0);
	printf("=============================PARENT AFTER WAIT\n");
	return 0;

}

-------------------------------------------------

ex3.c
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys.types.h>
#include<sys.wait.h>

int main()
{
	int r;
	char s[1024];
	FILE* p;
	p = popen("awk -F: '{print $1}' /etc/passwd | sort", "r");
	while (1)
	{
		if((fgets(s,1024),p)==NULL)
		{
			break;
		}
		printf("OUTPUT: %s",s);
	}
	pclose(p);
	return 0;
}


-------------------------------------------------
ex4.c

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys.types.h>
#include<sys.wait.h>

#define R 0
#define W 1

int main()
{
	int a[4] = {1,2,3,4};
	int p2a[2],a2p[2];
	int p2b[2],b2p[2];

	pipe(p2a);
	pipe(p2b);
	pipe(a2p);
	pipe(b2p);

	if (fork() == 0) // child A
	{
		a[0]+=a[1];
		write(a2p[W], &a[0], sizeof(int));

		close(a2p[R]); close(a2p[W]);
		close(b2p[R]); close(b2p[W]);
		exit(0);
	}
	if(fork() == 0 ) //child B
	{
		a[2]+=a[3];
		write(b2p[W], &a[2], sizeof(int));

		close(a2p[R]); close(a2p[W]);
		close(b2p[R]); close(b2p[W]);

		exit(0);
	}
	wait(0);
	wait(0);
	
	read(a2p[R], &a[0], sizeof(int));
	read(b2p[R], &a[0], sizeof(int));

	close(a2p[R]); close(a2p[W]);
	close(b2p[R]); close(b2p[W]);

	a[0] += a[2];

	printf("1+2+3+4=%d\n",a[0]);
	return 0;
}
-------------------------------------------------

ea.c

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys.types.h>s
#include<sys.wait.h>
#include<fontl.h>

#define R 0
#define W 1

int main()
{
	int x, y, t;
	int a2b, b2a;
	a2b = open("a2b",O_WRONLY);
	b2a = open("b2a",O_RDONLY);

	x=7;
	y=8;
	write(a2b,&x, sizeof(int));
	write(a2b,&y, sizeof(int));
	read(b2a,&t,sizeof(int));

	printf("%d + %d + = %d", x, y, t);
	close(a2b);
	close(b2a);
	return 0;
}


eb.c

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys.types.h>
#include<sys.wait.h>
#include<fontl.h>

#define R 0
#define W 1

int main()
{
	int x, y, t;
	int a2b, b2a;
	a2b = open("a2b",O_RDONLY);
	b2a = open("b2a",O_WRONLY);

	x=7;
	y=8;
	read(a2b,&x, sizeof(int));
	read(a2b,&y, sizeof(int));
	t=x+y;
	write(b2a,&t,sizeof(int));

	//printf("%d + %d + = %d", x, y, t);
	close(a2b);
	close(b2a);
	return 0;
}
