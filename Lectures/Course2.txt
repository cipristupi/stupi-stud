Course 2 Operating Systems

==============================================================

Samba pt share intre 

Shared file form virtual box to host Windows.

==============================================================
Command line redirections
==============================================================

> - write the output into a file replacing its content
>> - append the output to a file.
< - read the standard input (scanf) from a file 
<< -  read the standard input from "what follows"
==============================================================

==============================================================
Standard /error input/output
==============================================================

File descriptor  0 - standard input (this is where scanf reads from ) 
File descriptor  1 - standard output ( this is where printf prints to)
File descriptor  2 - standard error (this is where error prints)
[0,1,2] are all the time open

To redirect the standard error use 
	> File || 2>&1 - which means that we redirect the standard output into File and standard error into standard output
	2> File - standard error goes to File
==============================================================

==============================================================
Compiling with external libraries
==============================================================

If you can't read the compiler output because it displays weird characters run the command below:
	export LANG=C
Important: use gcc -Wall -o File  File.c 
[
Ctrl-Z suspend the current program
Command "fg" brings it back
Ctrl-C stops the current program (most of the time)
kill -9 always stops the program
]

If the compile errors have line numbers, it means that you need to fix things in your source code. If they do not , it means you  need to specify external libraries or additional source files.

Unix libraries are named "libNNNNNN.so" or "libNNNNNNN.a" to pass them to the compiler discard the starting "lib" and the extension, then prefix with -l

libm.sc -> -lm
libpthread.sc ->lpthread

gcc -Wall -o File  File.c  -lm #to get for example math.h

=====================
I/O Functions
=====================

System calls : open , close , read write ,lseek 

Library functions:(binary): fopen, fclose, fread, fwrite, fseed;

Library functions: (text) : scanf, fscanf, printf, fprintf, sscanf, sprintf , getc, fgetc, gets, fgets, putc, fputc, puts, fputs, getchar, putchar, ......

File descriptor types:
	- for system calls it is "int"
	- for library functions it is "FILE", which actually contains in it the "int" about

=====================
Text v Binary
=====================
Every file is binary. Some files contain only readable characters (mostly). When things were simple and mostly English, that means, a file that contained ASCI char only, was a text file. Today an UTF8 or UNICODE file can  also be looked at as text, but you need something to read it.

You can use the binary system calls of library functions on any file, but they might not always be the best, if the file is text.
A process will exit with code 0 upon success. Any other code means it is encountered an error during its execution.


If you don't get the expected manual page run "apropos" and all possible result.
==============================================================

==============================================================
[Examples]
==============================================================


awk /etc/passwd
sort filename.txt

sort a | uniq  #remove duplicated lines
sort a | uniq -c  #stats

sort a | uniq -c  | sort -r #sort reverse

sed "s/\(.\)/\1\n/g" filename.txt  #put new line after each char

sed "s/\(.\)/\1\n/g" filename.txt  | sort | uniq -c | sort -r | less

sed "s/\(.\)/\1\n/g" filename.txt  | sort | uniq -c | sort -r  > stat.txt #sent the output into the file 

echo "something important " > stat.txt #overwrite the content

echo "something important " >> stat.txt  #append on the end of the file.

sort  < filename.txt #read from standard input.

--------------------------------------------------------------
sort << elephant #label for EOF, to know where to stop.
dshagfdsa
ngjsadfhgds
hjgsfhadgjjfsg
jksadjgkds

elephant #the EOF in C++
--------------------------------------------------------------
/dev/null - anything you write in it is lost ... gone
		- you get nothing when you read from it

--------------------------------------------------------------
cat /dev/null
echo "something " > /dev/null

cat /dev/null > filename.txt #overwrite the content

sort 1234 #doesn't exist the file
rm 1234 #error, we don't have the file

rm 1234 > /dev/null # Error , No such file or directory

sort 1234 > /dev/null # Error
sort 1234 > dev/null 2>&1 # hide the error.
--------------------------------------------------------------

[C program]

#include<stdio.h>
#include<unistd.h>
int main()
{
	int k;
	char c;
	while(1)
	{
		k = read(0, &c , 1);//error if no input
		if(k==0)
		{
			perror("Read nothing");
			break;
		}
		if(k<0)
		{
			perror("Failed to read");
			break;
		}
		if( c !='a')
		{
			//write(1, &c , 1);
			write(2, &c , 1);//hide all
		}
	}
	return 0;

}

p3.c
./p.out filenamehere


#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fontl.h>

int main(int argc, char** argv)#Read a file , get the Filename like arguments
{
	//int fd;
	FILE* fd;
	char s[1000];
	char* p;
	int i;

	if(argc < 2)
	{
		fprintf(stderr, "No file \n");
		exit(1); //???????

	}
	fd = fopen(argv[1], "rt");

	if(fd == NULL)
	{
		perror("Failed to open the file.");
		exit(1); //Exit with code 1 , an error 
	}

	while(1)
	{
		p = fget(s, 1000 , fd);
		if(p==NULL)
		{
			break;
		}
		for(i=strlen(s)-1; i>=0; i--)
		{
			putchar(s[i]);
		}
		printf(s);
	}

	fclose(fd);
	
	return 0;
}


[C program]


[/Examples]
==============================================================